import{_ as e,o as a,c as i,R as s,a4 as t,a5 as l,a6 as n,a7 as p}from"./chunks/framework.aRfm0wQm.js";const _=JSON.parse('{"title":"构建桌面IDE","description":"","frontmatter":{},"headers":[],"relativePath":"guide/build.md","filePath":"guide/build.md","lastUpdated":1683276962000}'),r={name:"guide/build.md"},h=s('<h1 id="构建桌面ide" tabindex="-1">构建桌面IDE <a class="header-anchor" href="#构建桌面ide" aria-label="Permalink to &quot;构建桌面IDE&quot;">​</a></h1><blockquote><p>在上一篇文章 Eclipse Theia技术揭秘——初识Theia 简单介绍了一下Eclipse Theia这套IDE平台，这篇文章介绍一下如何基于Eclipse Theia构建桌面IDE。</p></blockquote><h2 id="eclipse-theia-blueprint介绍" tabindex="-1">Eclipse Theia Blueprint介绍 <a class="header-anchor" href="#eclipse-theia-blueprint介绍" aria-label="Permalink to &quot;Eclipse Theia Blueprint介绍&quot;">​</a></h2><p>首先我们先介绍一下Eclipse Theia Blueprint这套模板，它是用于构建基于 Eclipse Theia 平台的基于桌面的产品，以及展示 Eclipse Theia 功能。它由现有 Eclipse Theia 功能和扩展的子集组成，可以轻松下载并安装在所有主要操作系统平台上。大家可以去 <a href="https://theia-ide.org/docs/blueprint_download/" target="_blank" rel="noreferrer">https://theia-ide.org/docs/blueprint_download/</a> 下载体验一下，它也是开源的，可以在Github上参考其代码 <a href="https://github.com/eclipse-theia/theia-blueprint" target="_blank" rel="noreferrer">https://github.com/eclipse-theia/theia-blueprint</a> 。我们可以基于这套模板去定制我们的IDE产品。</p><h2 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h2><p>我们先下载Github的代码在本地运行一下。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ git clone git@github.com:eclipse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">theia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">theia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blueprint.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="工程结构" tabindex="-1">工程结构 <a class="header-anchor" href="#工程结构" aria-label="Permalink to &quot;工程结构&quot;">​</a></h2><p>然后我们打开工程看一下目录结构。 <img src="'+t+'" alt="在这里插入图片描述"></p><p>在最外层目录组织结构中可以看到整个工程使用 <a href="https://www.lernajs.cn/" target="_blank" rel="noreferrer">Lerna</a> 配置 mono-repo构建，applications下存放不同端的产品工程，比如当前electron包含应用到打包、打包配置和电子目标的 E2E 测试。theia-extensions下存放自定义的Theia扩展包，其中theia-blueprint-product包含当前自定义产品品牌的 Theia 扩展（关于对话和欢迎页面），theia-blueprint-updater包含更新机制和相关界面的Theia扩展。</p><p>接下来看一下applications下electron包中的内容。</p><ul><li>resources：electron打包常用一些资源，像应用的图标。</li><li>scripts：存放打包使用的脚本，像签名应用程序的脚本。</li><li>test：存放测试脚本</li><li>electron-builder.yml：<a href="https://www.electron.build/" target="_blank" rel="noreferrer">electron-builder</a>打包的配置文件</li><li>webpack.config.js：webpack的相关配置</li></ul><p>然后我们再安装一下依赖</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ yarn</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装依赖之后会执行package.json中的prepare脚本，我们来看一下。</p><p><img src="'+l+'" alt="在这里插入图片描述"> prepare脚本会执行yarn build和yarn download:plugins，这两个脚本最终会执行theia rebuild:electron、theia build和theia download:plugins。theia这个命令是来自devDependencies配置的@theia/cli。</p><p>执行完成后会发现electron工程下新增了一些文件。</p><p><img src="'+n+'" alt="在这里插入图片描述"></p><ul><li>lib：构建生成的Bundle包</li><li>plugins：执行download:plugins时下载的插件包</li><li>src-gen：theia命令自动生成的工程文件</li><li>gen-webpack.config.js：theia自动生成的webpack配置文件，由webpack.config.js引入</li></ul><h2 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h2><p>我们在工程根目录下执行</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ yarn electron start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>启动后界面如下</p><p><img src="'+p+'" alt="在这里插入图片描述"></p><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ yarn electron </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行完命令后，在electron目录下dist中生成安装包文件，windows是.exe安装程序，mac是.dmg安装程序。</p><h2 id="预览" tabindex="-1">预览 <a class="header-anchor" href="#预览" aria-label="Permalink to &quot;预览&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ yarn electron </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:preview</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令可以生成安装后的绿色版应用程序，可以直接打开不需安装。</p><p>以上就是Theia Blueprint提供的一些构建命令。</p>',31),d=[h];function o(c,u,b,k,g,m){return a(),i("div",null,d)}const v=e(r,[["render",o]]);export{_ as __pageData,v as default};
